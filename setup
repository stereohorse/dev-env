#!/usr/bin/env bash

set -euo pipefail


function echo_check() {
	echo "# checking $1... "
}

function echo_ok() {
	echo '+ OK'
}

function ensure() {
	echo_check "$1"

	if [[ "$#" -eq 2 ]]; then
		set -x
		($2)
		set +x
	else
		if ($2) &>dev-env-setup.log; then
			echo_ok
		else
			set -x
			($3)
			set +x
		fi
	fi


	echo
}


# -- high priority settings

ensure 'TRIM is enabled' \
	"system_profiler SPSerialATADataType | grep 'TRIM' | grep 'Yes'" \
	'sudo trimforce enable'

# -- setup packages

#  - system

ensure 'command line tools installed' \
	'command -v git' \
	'xcode-select --install'	

#  - brew

echo_check 'homebrew is installed'
command -v brew &>/dev/null || {
	set -x 
	/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	set +x
}
echo_ok
echo

ensure 'java is installed' \
	'java --version | grep -i "oracle"' \
	'brew cask install java'

ensure 'brew packages are installed' \
	"brew install $(cat brew-packages)"

ensure 'brew cask packages are installed' \
	"brew cask install $(cat brew-cask-packages)"

echo_check 'oh-my-zsh is installed'
if [[ ! -f "$HOME/.zshrc" ]]; then
	set -x
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh) && exit"
	set +x
fi
echo_ok
echo

#  - mas

echo_check 'mas packages are installed'
while read package; do
	set -x
	mas install $(mas search "$package" | head -n 1 | awk '{print $1}')
	set +x
done < mas-packages
echo_ok
echo

#  - pip

ensure 'pip packages are installed' \
	"pip2 install $(cat pip-packages)"

#  - nodejs

echo_check 'nvm is installed'
if [[ ! -d "$HOME/.nvm" ]]; then
	set -x
	curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
	set +x
fi
echo_ok
echo

#  - load nvm
set -x
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
set +x

ensure 'nodejs is installed' \
	'command -v node' \
	'nvm install stable && nvm alias default stable'

ensure 'nodejs packages are installed' \
	"npm install -g $(cat node-packages)"

#  - editor

echo_check 'vim-plug is installed'
if [[ ! -f "$HOME/.local/share/nvim/site/autoload/plug.vim" ]]; then
	set -x
	curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
		https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	set +x
fi
echo_ok
echo

echo_check 'neovim python package is installed'
pip2 install neovim && pip3 install neovim
echo_ok
echo

echo_check 'nerd fonts are installed'
fc-list | grep -i nerdfonts &>/dev/null || {
	set -x
	(cd /tmp \
		&& git clone --depth 1 https://github.com/ryanoasis/nerd-fonts.git \
		&& cd nerd-fonts \
		&& ./install.sh)
	set +x
}
echo_ok
echo

echo_check 'nvim config is linked'
if [[ ! -L "$HOME/.config/nvim/init.vim" ]]; then
	set -x
	mkdir -p $HOME/.config/nvim && ln -s $PWD/configs/neovim $HOME/.config/nvim/init.vim
	set +x
fi
echo_ok
echo

#  - tmux

ensure 'tpm is installed' \
	"test -d $HOME/.tmux/plugins/tpm" \
	"git clone https://github.com/tmux-plugins/tpm $HOME/.tmux/plugins/tpm"

ensure 'tmux config is linked' \
	"test -L $HOME/.tmux.conf" \
	"ln -s $PWD/configs/tmux $HOME/.tmux.conf"

ensure 'tmux solarized dark theme is linked' \
	"test -L $HOME/.tmux.solarized.dark" \
	"ln -s $PWD/configs/tmux.solarized.dark $HOME/.tmux.solarized.dark"

ensure 'tmux solarized light theme is linked' \
	"test -L $HOME/.tmux.solarized.light" \
	"ln -s $PWD/configs/tmux.solarized.light $HOME/.tmux.solarized.light"

#  - zsh

echo_check 'zplug is installed'
if [[ ! -f "$HOME/.zplug/init.zsh" ]]; then
	set -x
	curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh| zsh
	set +x
fi
echo_ok
echo

echo_check 'zsh config is linked'
if [[ ! -L "$HOME/.zshrc" ]]; then
	set -x
	mv $HOME/.zshrc $HOME/.zshrc.bak.$(date +%s) && ln -s $PWD/configs/zshrc $HOME/.zshrc
	set +x
fi
echo_ok
echo

# -- settings

HOSTNAME=metalbook
function set_hostname() {
	sudo scutil --set HostName $HOSTNAME \
		&& sudo scutil --set LocalHostName $HOSTNAME \
		&& sudo scutil --set ComputerName $HOSTNAME \
		&& sudo dscacheutil -flushcache
}

ensure 'hostname is set' \
	"hostname | grep '$HOSTNAME'" \
	'set_hostname'

ensure 'dock is clean' \
	'dockutil --remove all'

# -- finish

echo '# setup finished'
echo '# please, restart OS'
